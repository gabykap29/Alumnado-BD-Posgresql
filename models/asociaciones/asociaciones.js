import { Institucion } from "../Institucion.js";
import { Modalidad } from "../Modalidad.js";
import { NivelEducativo } from "../NivelEducativo.js";
import { Localidad } from "../Localidad.js";
import { Departamento } from "../Departamento.js";
import { Ambito } from "../Ambito.js";
import { Sector } from "../Sector.js";
import { sequelize } from "../../database/db.js";
import { Alumno } from "../Alumno.js";
import { PlanEducativo } from "../planEducativo.js";
import { Materia } from "../Materias.js";
import { HistorialAcademico } from "../HistorialAcademico.js";
import { Promovidos } from "../Promovidos.js";




Institucion.belongsToMany(NivelEducativo, {
  through: "InstitucionNivel",
  foreignKey: "institucion_id",
  otherKey: "nivel_educativo_id",
  as: "nivelEducativo",
  timestamps: false,
});

Departamento.hasMany(Localidad, {
  foreignKey: "departamento_id",
  as: "localidad",
  timestamps: false,
});
Localidad.belongsTo(Departamento, {
  foreignKey: "departamento_id",
  as: "localidad",
  timestamps: false,
});

Localidad.hasMany(Institucion, {
  foreignKey: "localidad_id",
  as: "institucionLocalidad",
  timestamps: false,
});

Institucion.belongsTo(Localidad, {
  foreignKey: "localidad_id",
  as: "institucionLocalidad",
  timestamps: false,
});

Ambito.hasMany(Institucion, {
  foreignKey: "ambito_id",
  as: "institucionAmbito",
  timestamps: false,
});
Institucion.belongsTo(Ambito, {
  foreignKey: "ambito_id",
  as: "institucionAmbito",
  timestamps: false,
});

Modalidad.hasMany(NivelEducativo,{
  foreignKey: "modalidad_id",
  as: "nivelEducativoModalidad",
  timestamps: false,
});
NivelEducativo.belongsTo(Modalidad,{
  foreignKey: "modalidad_id",
  as: "nivelEducativoModalidad",
  timestamps: false,
});

Sector.hasMany(Institucion, {
  foreignKey: "sector_id",
  as: "institucionSector",
  timestamps: false,
});
Institucion.belongsTo(Sector, {
  foreignKey: "sector_id",
  as: "institucionSector",
  timestamps: false,
});


// En el modelo Alumno
Alumno.belongsTo(NivelEducativo, {
  foreignKey: 'nivel_educativo_id',
  as: 'nivel',
  timestamps: false,
});

// En el modelo NivelEducativo
NivelEducativo.hasMany(Alumno, {
  foreignKey: 'nivel_educativo_id',
  as: 'nivel',
  timestamps: false,
});



Institucion.hasMany(Alumno,{
  foreignKey: "Institucion_id",
  as: "alumnoInstitucion",
  timestamps: false,
});
Alumno.belongsTo(Institucion,{
  foreignKey: "Institucion_id",
  as: "alumnoInstitucion",
  timestamps: false,
});

PlanEducativo.hasMany(Materia,{
  foreignKey: "plan_educativo_id",
  as: "materiaPlanEducativo",
  timestamps: false,
});
Materia.belongsTo(PlanEducativo,{
  foreignKey: "plan_educativo_id",
  as: "materiaPlanEducativo",
  timestamps: false,
});

HistorialAcademico.hasMany(Materia,{
  foreignKey: "id_materia",
  as: "materiaHistorialAcademico",
  timestamps: false,
});
Materia.belongsTo(HistorialAcademico,{
  foreignKey: "materia_id",
  as: "materiaHistorialAcademico",
  timestamps: false,
});

Alumno.hasMany(HistorialAcademico,{
  foreignKey: "alumno_id",
  as: "historialAcademicoAlumno",
  timestamps: false,
});
HistorialAcademico.belongsTo(Alumno,{
  foreignKey: "alumno_id",
  as: "historialAcademicoAlumno",
  timestamps: false,
});

PlanEducativo.hasMany(Alumno,{
  foreignKey: "plan_educativo_id",
  as: "alumnoPlanEducativo",
  timestamps: false,
});

Alumno.belongsTo(PlanEducativo,{
  foreignKey: "plan_educativo_id",
  as: "alumnoPlanEducativo",
  timestamps: false,
});




sequelize.sync();




let idDepartamentos = [
  null,
  34035,
  34035,
  34056,
  34056,
  34035,
  34007,
  34007,
  34014,
  34042,
  34056,
  34007,
  34014,
  34021,
  34063,
  34035,
  34014,
  34028,
  34042,
  34049,
  34056,
  34021,
  34035,
  34035,
  34035,
  34028,
  34035,
  34063,
  34035,
  34028,
  34056,
  34028,
  34056,
  34035,
  34056,
  34049,
  34056,
  34035,
  34049,
  34035,
  34042,
  34056,
  34042,
  34035,
  34035,
  34035,
  34056,
  34035,
  34014,
  34035,
  34056,
  34035,
  34042,
  34056,
  34056,
  34056,
  34021,
  34035,
  34021,
  34056,
  34056,
  34035,
  34056,
  34056,
  34035,
  34056,
  34035,
  34035,
  34056,
  34014,
  34035,
  34035,
  34035,
  34056,
  34035,
  34049,
  34056,
  34021,
  34035,
  34035,
  34056,
  34049,
  34035,
  34042,
  34035,
  34014,
  34014,
  34056,
  34056,
  34021,
  34021,
  34035,
  34049,
  34035,
  34035,
  34035,
  34056,
  34035,
  34035,
  34035,
  34049,
  34035,
  34035,
  34021,
  34035,
  34063,
  34063,
  34028,
  34035,
  34063,
  34063,
  34056,
  34049,
  34056,
  34063,
  34056,
  34063,
  34021,
  34007,
  34035,
  34056,
  34007,
  34007,
  34035,
  34007,
  34035,
  34007,
  34063,
  34063,
  34007,
  34007,
  34056,
  34035,
  34007,
  34056,
  34056,
  34035,
  34035,
  34035,
  34042,
  34063,
  34056,
  34056,
  34007,
  34035,
  34021,
  34028,
  34028,
  34035,
  34063,
  34049,
  34035,
  34056,
  34056,
  34042,
  34028,
  34063,
  34063,
  34007,
  34007,
  34049,
  34035,
  34007,
  34056,
  34063,
  34028,
  34056,
  34056,
  34063,
  34063,
  34007,
  34063,
  34007,
  34063,
  34035,
  34028,
  34028,
  34063,
  34063,
  34049,
  34035,
  34021,
  34056,
  34014,
  34035,
  34007,
  34007,
  34035,
  34007,
  34049,
  34021,
  34014,
  34007,
  34014,
  34021,
  34035,
  34028,
  34014,
  34049,
  34042,
  34049,
  34049,
  34049,
  34035,
  34042,
  34021,
  34056,
  34035,
  34056,
  34056,
  34035,
  34063,
  34063,
  34035,
  34007,
  34035,
  34056,
  34049,
  34035,
  34028,
  34007,
  34035,
  34056,
  34056,
  34007,
  34035,
  34007,
  34007,
  34035,
  34035,
  34056,
  34021,
  34007,
  34007,
  34056,
  34007,
  34035,
  34035,
  34049,
  34042,
  34049,
  34042,
  34007,
  34007,
  34007,
  34007,
  34035,
  34007,
  34007,
  34056,
  34035,
  34035,
  34035,
  34063,
  34056,
  34056,
  34049,
  34035,
  34056,
  34056,
  34042,
  34042,
  34007,
  34007,
  34035,
  34056,
  34007,
  34035,
  34063,
  34056,
  34056,
  34056,
  34035,
  34056,
  34035,
  34056,
  34035,
  34035,
  34063,
  34049,
  34035,
  34049,
  34063,
  34014,
  34049,
  34007,
  34007,
  34056,
  34063,
  34042,
  34014,
  34056,
  34056,
  34056,
  34049,
  34063,
  34056,
  34063,
  34056,
  34049,
  34035,
  34021,
  34007,
  34056,
  34056,
  34042,
  34035,
  34021,
  34056,
  34021,
  34056,
  34063,
  34063,
  34063,
  34028,
  34007,
  34007,
  34007,
  34063,
  34035,
  34028,
  34035,
  34063,
  34035,
  34035,
  34007,
  34007,
  34049,
  34014,
  34007,
  34063,
  34035,
  34049,
  34042,
  34035,
  34049,
  34035,
  34035,
  34049,
  34021,
  34049,
  34035,
  34007,
  34056,
  34049,
  34042,
  34042,
  34035,
  34007,
  34021,
  34014,
  34063,
  34035,
  34035,
  34063,
  34035,
  34007,
  34063,
  34063,
  34049,
  34049,
  34035,
  34056,
  34035,
  34007,
  34035,
  34007,
  34021,
  34035,
  34028,
  34049,
  34042,
  34021,
  34063,
  34028,
  34035,
  34007,
  34035,
  34007,
  34063,
  34021,
  34035,
  34035,
  34035,
  34042,
  34056,
  34035,
  34042,
  34042,
  34014,
  34042,
];

let codPostal = [
  null,
  3624,
  3615,
  3601,
  3606,
  3624,
  3634,
  3620,
  3636,
  3615,
  3603,
  3630,
  3600,
  3601,
  3630,
  3622,
  3601,
  3636,
  3615,
  3611,
  0,
  3526,
  3628,
  3626,
  3624,
  3636,
  3620,
  3636,
  3630,
  3636,
  3603,
  3636,
  3609,
  3632,
  3606,
  3613,
  3606,
  3621,
  3610,
  3615,
  3615,
  3606,
  3615,
  3630,
  3620,
  3620,
  3609,
  3621,
  3601,
  3621,
  3603,
  3624,
  3615,
  3601,
  3608,
  3603,
  3605,
  3624,
  3605,
  3609,
  3606,
  3621,
  3608,
  3601,
  3624,
  3603,
  3624,
  3624,
  3601,
  3601,
  3630,
  3626,
  3624,
  3606,
  3626,
  3611,
  3603,
  3605,
  3628,
  3626,
  3606,
  3611,
  3620,
  3611,
  3621,
  3601,
  3601,
  3606,
  3603,
  3605,
  3526,
  3621,
  3611,
  3621,
  3624,
  3624,
  3606,
  3615,
  3621,
  3624,
  3613,
  3620,
  3621,
  3601,
  3620,
  3636,
  3636,
  3636,
  3628,
  3636,
  3636,
  3608,
  3613,
  3609,
  3636,
  3603,
  3636,
  3601,
  3634,
  3603,
  3606,
  3636,
  3634,
  3621,
  3630,
  3621,
  3636,
  3636,
  3636,
  3636,
  3634,
  3606,
  3615,
  3630,
  3603,
  3606,
  3626,
  3630,
  3624,
  3615,
  3636,
  3601,
  3606,
  3636,
  3620,
  3526,
  3636,
  3636,
  3624,
  0,
  3611,
  3630,
  3600,
  3602,
  3611,
  3636,
  3600,
  3636,
  3634,
  3636,
  3611,
  3626,
  3630,
  3608,
  3636,
  3636,
  3609,
  3606,
  3636,
  3601,
  3634,
  3636,
  3636,
  3636,
  3621,
  3636,
  3636,
  3630,
  3636,
  3611,
  3626,
  3601,
  3608,
  3600,
  3621,
  3630,
  3630,
  3621,
  3630,
  3611,
  3526,
  3604,
  3630,
  3600,
  3601,
  3624,
  3636,
  3600,
  3611,
  3615,
  3611,
  3613,
  3613,
  3630,
  3615,
  3526,
  3601,
  3621,
  3603,
  3603,
  3626,
  3636,
  3636,
  3624,
  3630,
  3621,
  3606,
  3611,
  3628,
  3636,
  3630,
  3630,
  3606,
  3606,
  3636,
  3624,
  3636,
  3634,
  3630,
  3630,
  3601,
  3601,
  3632,
  3630,
  3603,
  3630,
  3626,
  3626,
  3613,
  3611,
  3611,
  3611,
  3636,
  3634,
  3632,
  3636,
  3630,
  3630,
  3634,
  3601,

  3630,
  3626,
  3636,
  3606,
  3606,
  3611,
  3615,
  3606,
  3606,
  3611,
  3615,
  3632,
  3636,
  3620,
  3608,
  3636,
  3621,
  3636,
  3603,
  3608,
  3602,
  3620,
  3602,
  3630,
  3601,
  3630,
  3630,
  3636,
  3611,
  3624,
  3613,
  3636,
  3604,
  3611,
  3634,
  3630,
  3601,
  3636,
  0,
  3601,
  3606,
  3606,
  3606,
  3611,
  3636,
  3608,
  3636,
  3606,
  3611,
  3628,
  3605,
  3636,
  3606,
  3606,
  3615,
  3632,
  3601,
  3608,
  3526,
  3608,
  3636,
  3636,
  3636,
  3636,
  3636,
  3630,
  3632,
  3636,
  3628,
  3636,
  3626,
  3636,
  3626,
  3626,
  3636,
  3636,
  3611,
  3600,
  3636,
  3636,
  3624,
  3610,
  3615,
  3630,
  3611,
  3626,
  3624,
  3611,
  3601,
  3610,
  3620,
  3630,
  3603,
  3613,
  3611,
  3615,
  3626,
  3630,
  3605,
  3600,
  3636,
  3621,
  3621,
  3636,
  3603,
  3634,
  3615,
  3636,
  3613,
  3613,
  3626,
  3601,
  3624,
  3636,
  3624,
  3634,
  3601,
  3630,
  3636,
  3611,
  3611,
  3601,
  3636,
  3636,
  0,
  3636,
  3621,
  3636,
  3636,
  3526,
  3621,
  3615,
  3628,
  3611,
  3602,
  3628,
  3615,
  3615,
  3600,
  3615,
  0,
];
let materias_primaria = ["Matemáticas","Lengua","Ciencias Naturales","Ciencias Sociales","Educación Física","Educación Artística","Formación Ética y Ciudadana","Inglés","Informática",
];

const materias_secundaria = ["Lengua","Matemática","Lengua Extranjera","Educación Física","Lenguaje musical","Lenguaje artístico combinado","Biología I","Biología II", "Biología III","Ciencias Físico-Química I","Ciencias Físico-Química II","Ciencias Físico-Química III","Historia I","Historia II","Historia III","Geografía I","Geografía II","Geografía III","Tecnología","Formación ética y ciudadana"
];
const materias_superior = [ "Base de Datos I","Taller de Lenguajes de Programación","Mineria de Datos","Ingenieria de Software","Matematicas",  "Matematicas","Fisica","Algoritmos","Base de Datos","Redes y Telecomunicaciones"]

const comprobaciones = async () => {
  Localidad.sync();

  Ambito.sync();
  const countAmbito = await Ambito.count();
  if (countAmbito === 0) {
    await Ambito.bulkCreate([
      {
        name_ambito: "Rural",
      },
      {
        name_ambito: "Urbano",
      },
    ]);
    console.log("Ambitos cargados!");
  } else {
    console.log("Los ambitos ya se encuentran cargados!");
  }

  Sector.sync();
  const countSector = await Sector.count();
  if (countSector === 0) {
    await Sector.bulkCreate([
      {
        name_sector: "Privado",
      },
      {
        name_sector: "Publico",
      },
      {
        name_sector: "Social/Coperativa",
      },
    ]);
    console.log("Sectores cargados!");
  } else {
    console.log("Los sectores ya se encuentran cargados!");
  }

  Modalidad.sync();
  const countModalidad = await Modalidad.count();
  if (countModalidad === 0) {
    await Modalidad.bulkCreate([
      {
        name_modalidad: "mod_comun",
      },
      {
        name_modalidad: "mod_especial",
      },
      {
        name_modalidad: "mod_adultos",
      },
    ]);
    console.log("Modalidades cargadas!");
  } else {
    console.log("Las modalidades ya se encuentran cargadas!");
  }
  await NivelEducativo.sync();
  const countNivel = await NivelEducativo.count();
  if (countNivel == 0) {
    NivelEducativo.bulkCreate([
      { modalidad_id: 1, nombre_nivel: "ec_mat" },
      { modalidad_id: 1, nombre_nivel: "ec_jar" },
      { modalidad_id: 1, nombre_nivel: "ec_pri" },
      { modalidad_id: 1, nombre_nivel: "ec_sec" },
      { modalidad_id: 1, nombre_nivel: "ec_sec_INET" },
      { modalidad_id: 1, nombre_nivel: "ec_SNU" },
      { modalidad_id: 1, nombre_nivel: "ec_SNU_INET" },
      { modalidad_id: 1, nombre_nivel: "ec_SNU_cur" },
      { modalidad_id: 2, nombre_nivel: "esp_tem" },
      { modalidad_id: 2, nombre_nivel: "esp_ini" },
      { modalidad_id: 2, nombre_nivel: "esp_pri" },
      { modalidad_id: 2, nombre_nivel: "esp_sec" },
      { modalidad_id: 2, nombre_nivel: "esp_int" },
      { modalidad_id: 3, nombre_nivel: "ad_pri" },
      { modalidad_id: 3, nombre_nivel: "ad_sec" },
      { modalidad_id: 3, nombre_nivel: "ad_FP" },
      { modalidad_id: 3, nombre_nivel: "ad_FP_INET" },
      { modalidad_id: 3, nombre_nivel: "ad_alf" },
      { modalidad_id: 2, nombre_nivel: "hos_ini" },
      { modalidad_id: 2, nombre_nivel: "hos_pri" },
      { modalidad_id: 2, nombre_nivel: "hos_sec" },
      { modalidad_id: 2, nombre_nivel: "tall_art" },
      { modalidad_id: 2, nombre_nivel: "ser_com" },
    ]);
  }
// del 1 al 4 plan secundario, del 5 al 8 plan superior, 9 Primaria, 10 inicial
  await PlanEducativo.sync();
  const countPlan = await PlanEducativo.count();
  if (countPlan == 0) {
    PlanEducativo.bulkCreate([
      {
        name_plan_educativo: "Tecnico en Informática",
      },
      {
        name_plan_educativo: "Tecnico en Programción",
      },
      {
        name_plan_educativo: "Tecnico en Redes",
      },
      {
        name_plan_educativo: "Tecnico en Ambiente y Salud"
      },
      {
        name_plan_educativo: "Tecnico Sup. en Desarrollo de Software"
      },
      {
        name_plan_educativo:"Tecnico Sup. en Redes y Telecomunicaciones"
      },
      {
        name_plan_educativo:"Tecnico Sup. en Diseño Grafico"
      },
      {
        name_plan_educativo:"Tecnico Sup. en Administración de Empresas"
      },
      {
        name_plan_educativo:" Primaria"
      },
      {
        name_plan_educativo:"Inicial"
      }
    ]);
  };
  console.log("Planes educativos cargados correctamente!");
//1 al 9 primaria , del 10 al 26 secundaria, del 27 al 36 superior
  await Materia.sync();
  const countMateria = await Materia.count();
  if (countMateria == 0) {
      for (let i = 1; i < materias_primaria.length; i++){
        Materia.create({
          name_materia: materias_primaria[i],
          plan_educativo_id: 9
        });
      };
      console.log('Materias de primarias cargadas correctamente!');
      for (let i = 1; i < materias_secundaria.length; i++){
        let numPlan = Math.floor(Math.random()*4+1)
        Materia.create({
          name_materia: materias_secundaria[i],
          plan_educativo_id: numPlan
        });
      };
      console.log('materias secundarias cargadas correctamente!');
      for(let i = 1; i< materias_superior.length; i++){
        let numPlan = Math.floor(Math.random()*4+5)
        Materia.create({
          name_materia: materias_superior[i],
          plan_educativo_id: numPlan
        });
      };
      console.log('Materias de superior cargadas correctamente!');
  }
};

comprobaciones();

export {
  Institucion,
  Modalidad,
  NivelEducativo,
  Localidad,
  Departamento,
  Ambito,
  Sector,
  Promovidos,
  Alumno,
};
